    def photometryCut(self, data):
        """
        HSC galaxies were binned in color magnitude space with i-band mag from -2 to 6 and g-z color from 13 to 26.
        """
        mask = (data[self.config.colnames['i']] > 13.0) & (data[self.config.colnames['i']] < 26.)
        self.mask &= mask
        gz = data[self.config.colnames['g']] - data[self.config.colnames['z']]
        mask = (gz > -2.) & (gz < 6.)
        self.mask &= mask

    def speczSuccess(self, data):
        """
        HSC galaxies were binned in color magnitude space with i-band mag from -2 to 6 and g-z color from 13 to 26
        200 bins in each direction. The ratio of of galaxies with spectroscopic redshifts (training galaxies) to
        galaxies with only photometry in HSC wide field (application galaxies) was computed for each pixel. We divide
        the data into the same pixels and randomly select galaxies into the training sample based on the HSC ratios
        """
        success_rate_dir = self.config.success_rate_dir
        x_edge = np.loadtxt(os.path.join(
                success_rate_dir, "hsc_i_binedge.txt"))
        y_edge = np.loadtxt(os.path.join(
                success_rate_dir, "hsc_gz_binedge.txt"))

        rates = np.loadtxt(os.path.join(
                success_rate_dir, "hsc_success.txt"))

        pixels_y = np.searchsorted(y_edge, data[self.config.colnames['g']]-data[self.config.colnames['z']])
        pixels_x = np.searchsorted(x_edge, data[self.config.colnames['i']])
        
        # Do the color-based, percentile-based redshift cut
        
        percentile_cut = self.config.percentile_cut
        
        mask_keep = np.ones_like(data[self.config.colnames['i']])
        if percentile_cut != 100:
            pixels_y_unique = np.unique(pixels_y)
            pixels_x_unique = np.unique(pixels_x)
            
            for y in pixels_y_unique:
                print(y)
                for x in pixels_x_unique:
                    ind_inpix = np.where((pixels_y==y) * (pixels_x==x))[0]
                    if ind_inpix.size == 0:
                        continue
                    redshifts = data[self.config.colnames['redshift']][ind_inpix]
                    percentile = np.percentile(redshifts, percentile_cut)
                    ind_remove = ind_inpix[redshifts>percentile]
                    mask_keep[ind_remove] = 0
            self.mask &= mask_keep

        pixels_y = pixels_y - 1
        pixels_x = pixels_x - 1

        ratio_list = np.zeros(len(pixels_y))
        for i, py in enumerate(pixels_y):
            if (py >= rates.shape[0]) or\
               (pixels_x[i] >= rates.shape[1]):
                ratio_list[i] = 0
            else:
                ratio_list[i] = rates[pixels_y[i]][pixels_x[i]]

        randoms = np.random.uniform(size=data[self.config.colnames['i']].size)
        mask = (randoms <= ratio_list)
        self.mask &= mask